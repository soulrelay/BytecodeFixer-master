apply plugin: 'com.android.application'

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'
    defaultConfig {
        applicationId "com.llew.bytecode.fix"
        minSdkVersion 19
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            assets.srcDirs = ['src/main/assets', 'src/main/assets/']
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:26.+'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.didi.onecar:didiqueuesdk:1.1.15.9'
}

apply plugin: 'com.llew.bytecode.fix'

bytecodeFixConfig {
    enable = true
    logEnable = true
    keepFixedJarFile = true
    keepFixedClassFile = true
    dependencies = [
            getAppClassesDir()
    ]
    fixConfig = [
                    //  'com.didi.queue.component.queuecard.view.QueueCardV2View##init()##System.out.println("I1 have hooked this method by BytecodeFixer plugin !!!");##0',
//            'com.didi.queue.utils.UIUtils##isFastDoubleClick()##System.out.println("I1 have hooked this method by BytecodeFixer plugin !!!");##0',
//            'com.didi.queue.TestUtils##get()##System.out.println("I1 have hooked this method by BytecodeFixer plugin !!!");##0',
//            'android.support.constraint.ConstraintLayout##setId(int)##System.out.println("I1 have hooked this method by BytecodeFixer plugin !!!");##0',
//            'android.support.constraint.solver.widgets.Barrier##setBarrierType(int)##System.out.println("I1 have hooked this method by BytecodeFixer plugin !!!");##0',
            //           'com.didi.queue.component.queuecard.view.QueueCardV2View##init()##{}##0',
            //           'com.didi.queue.component.queuecard.view.QueueCardV2View##getView()##System.out.println("I1 have hooked this method by BytecodeFixer plugin !!!");##0'

            'com.didi.queue.component.queuecard.view.QueueCardV2View##init()##com.llew.bytecode.fix.bean.Person var5 = new com.llew.bytecode.fix.bean.Person();var5.name = "xiaoming";##6'

    ]
}

String getAppClassesDir() {

    android.applicationVariants.all { variant ->

        def variantOutput = variant.outputs.first()
        def variantName = variant.name
        def variantData = variant.variantData
        def buildType = variant.buildType.name

        def str = new StringBuffer().append(project.rootDir.absolutePath)
                .append(File.separator).append("app")
                .append(File.separator).append("build")
                .append(File.separator).append("intermediates")
                .append(File.separator).append("classes")
                .append(File.separator).append(variantName.subSequence(0, buildType.length()))
                .append(File.separator).append(buildType)
                .append(File.separator).toString()
        return str
    }

    return new StringBuffer().append(project.rootDir.absolutePath)
            .append(File.separator).append("app")
            .append(File.separator).append("build")
            .append(File.separator).append("intermediates")
            .append(File.separator).append("classes")
            .append(File.separator).append("debug").toString()
}

//配置 app module
project(":app") {
    Project project ->
        project.afterEvaluate {
            //获取build task 任务
            Task buildTask = getBuildTask(project, ":app:build")
            //获取 preBuild 任务
            Task preBuildTask = getBuildTask(project, ":app:preBuild")

            def taskStartTime = 0
            def taskEndTime = 0

            //在preBuild task 中追加一个监听获取在preBuild执行之前的时间戳的 action
            preBuildTask.doFirst {
                taskStartTime = System.currentTimeMillis()
            }
            //在build task 中追加一个监听获取执行完毕的时间戳的 action
            buildTask.doLast {
                taskEndTime = System.currentTimeMillis()
                println "build task 执行时间：${taskEndTime - taskStartTime}"
            }
        }
}

/**
 * 获取该project对应的build任务
 * @param project
 * @return
 */
Task getBuildTask(Project project, String taskPath) {

    //获取该project管理task的容器
    TaskContainer taskContainer = project.getTasks()

    //拿到build的Task对象
    Task buildTask = taskContainer.getByPath(taskPath)

    return buildTask
}

this.getParentProject()

def getParentProject() {
    def name = this.getParent().name
    println "the ${this.project.name}'s parent project name is: ${name}"
}

